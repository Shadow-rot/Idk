import asyncio
import time
import random
from telegram import Update
from telegram.ext import CommandHandler, CallbackContext
from shivu import application, user_collection, collection

# Configuration
DICE_COOLDOWN = 1800  # 30 minutes
PROPOSE_COOLDOWN = 300  # 5 minutes
PROPOSAL_COST = 2000

# Cooldown storage
cooldowns = {'dice': {}, 'propose': {}}

# Messages
SUCCESS_MSGS = [
    "·¥Ä·¥Ñ·¥Ñ·¥á·¥ò·¥õ·¥á·¥Ö  è·¥è·¥ú Ä ·¥ò Ä·¥è·¥ò·¥ès·¥Ä ü",
    "s·¥Ä…™·¥Ö  è·¥ás ·¥õ·¥è  è·¥è·¥ú Ä  ú·¥á·¥Ä Ä·¥õ",
    "…™s …¥·¥è·¥°  è·¥è·¥ú Äs “ì·¥è Ä·¥á·¥†·¥á Ä",
    "·¥ä·¥è…™…¥·¥á·¥Ö  è·¥è·¥ú Ä  ú·¥Ä Ä·¥á·¥ç",
    "“ì·¥á ü ü “ì·¥è Ä  è·¥è·¥ú"
]

FAIL_MSGS = [
    "s ú·¥á  Ä·¥á·¥ä·¥á·¥Ñ·¥õ·¥á·¥Ö  è·¥è·¥ú ·¥Ä…¥·¥Ö  Ä·¥Ä…¥ ·¥Ä·¥°·¥Ä è",
    "s ú·¥á s·¥Ä…™·¥Ö …¥·¥è ·¥Ä…¥·¥Ö  ü·¥á“ì·¥õ",
    "s ú·¥á ·¥°·¥Ä ü·¥ã·¥á·¥Ö ·¥Ä·¥°·¥Ä è “ì Ä·¥è·¥ç  è·¥è·¥ú",
    "s ú·¥á ·¥Ö…™s·¥Ä·¥ò·¥ò·¥á·¥Ä Ä·¥á·¥Ö …™…¥ ·¥õ ú·¥á ·¥°…™…¥·¥Ö",
    " ô·¥á·¥õ·¥õ·¥á Ä  ü·¥ú·¥Ñ·¥ã …¥·¥áx·¥õ ·¥õ…™·¥ç·¥á"
]

def check_cooldown(user_id, cmd_type, cooldown_time):
    """Check and update cooldown"""
    if user_id in cooldowns[cmd_type]:
        elapsed = time.time() - cooldowns[cmd_type][user_id]
        if elapsed < cooldown_time:
            return False, int(cooldown_time - elapsed)
    cooldowns[cmd_type][user_id] = time.time()
    return True, 0

async def get_unique_chars(user_id, rarities=None):
    """Optimized character fetching with aggregation pipeline"""
    try:
        rarities = rarities or ['üü¢ Common', 'üü£ Rare', 'üü° Legendary']
        
        # Single optimized query
        pipeline = [
            {'$match': {'rarity': {'$in': rarities}}},
            {
                '$lookup': {
                    'from': user_collection.name,
                    'let': {'char_id': '$id'},
                    'pipeline': [
                        {'$match': {'id': user_id}},
                        {'$project': {'characters.id': 1}}
                    ],
                    'as': 'user_chars'
                }
            },
            {
                '$match': {
                    '$expr': {
                        '$not': {
                            '$in': ['$id', {'$ifNull': [{'$arrayElemAt': ['$user_chars.characters.id', 0]}, []]}]
                        }
                    }
                }
            },
            {'$sample': {'size': 1}}
        ]
        
        chars = await collection.aggregate(pipeline).to_list(1)
        return chars if chars else []
    except:
        # Fallback to simple method if aggregation fails
        user_data = await user_collection.find_one({'id': user_id}, {'characters.id': 1})
        claimed_ids = [c.get('id') for c in user_data.get('characters', [])] if user_data else []
        
        chars = await collection.aggregate([
            {'$match': {'rarity': {'$in': rarities}, 'id': {'$nin': claimed_ids}}},
            {'$sample': {'size': 1}}
        ]).to_list(1)
        return chars if chars else []

async def add_char(user_id, username, first_name, char):
    """Optimized character addition with upsert"""
    try:
        await user_collection.update_one(
            {'id': user_id},
            {
                '$push': {'characters': char},
                '$set': {'username': username, 'first_name': first_name},
                '$setOnInsert': {'balance': 0}
            },
            upsert=True
        )
        return True
    except Exception as e:
        print(f"Error adding character: {e}")
        return False

def format_caption(user_id, first_name, char, dice_val=None):
    """Format character caption"""
    event = f"\n·¥á·¥†·¥á…¥·¥õ: {char['event']['name']}" if char.get('event', {}).get('name') else ""
    origin = f"\n·¥è Ä…™…¢…™…¥: <b>{char['origin']}</b>" if char.get('origin') else ""
    abilities = f"\n·¥Ä ô…™ ü…™·¥õ…™·¥ás: <b>{char['abilities']}</b>" if char.get('abilities') else ""
    
    msg = random.choice(SUCCESS_MSGS)
    dice_txt = f"·¥Ö…™·¥Ñ·¥á  Ä·¥ás·¥ú ü·¥õ: <b>{dice_val}</b>\n" if dice_val else ""
    
    return f"""{dice_txt}·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥s <a href='tg://user?id={user_id}'>{first_name}</a>
{char['name']} {msg}
…¥·¥Ä·¥ç·¥á: <b>{char['name']}</b>
 Ä·¥Ä Ä…™·¥õ è: <b>{char['rarity']}</b>
·¥Ä…¥…™·¥ç·¥á: <b>{char['anime']}</b>
…™·¥Ö: <code>{char['id']}</code>{event}{origin}{abilities}
·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è  è·¥è·¥ú Ä  ú·¥Ä Ä·¥á·¥ç ‚ú®"""

async def dice_marry(update: Update, context: CallbackContext):
    """Dice marry command"""
    try:
        user_id = update.effective_user.id
        first_name = update.effective_user.first_name
        username = update.effective_user.username

        can_use, remaining = check_cooldown(user_id, 'dice', DICE_COOLDOWN)
        if not can_use:
            mins, secs = divmod(remaining, 60)
            await update.message.reply_text(
                f"·¥°·¥Ä…™·¥õ <b>{mins}·¥ç {secs}s</b>  ô·¥á“ì·¥è Ä·¥á  Ä·¥è ü ü…™…¥…¢ ·¥Ä…¢·¥Ä…™…¥ ‚è≥",
                parse_mode='HTML'
            )
            return

        # Check user exists (quick query)
        user_exists = await user_collection.count_documents({'id': user_id}, limit=1)
        if not user_exists:
            await update.message.reply_text(" è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è …¢ Ä·¥Ä ô ·¥Ä ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä “ì…™ Äs·¥õ\n·¥ús·¥á /grab", parse_mode='HTML')
            return

        dice_msg = await context.bot.send_dice(chat_id=update.effective_chat.id, emoji='üé≤')
        dice_val = dice_msg.dice.value
        await asyncio.sleep(3)

        if dice_val in [1, 6]:
            chars = await get_unique_chars(user_id)
            if not chars:
                await update.message.reply_text("…¥·¥è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs\n·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä üíî", parse_mode='HTML')
                return

            char = chars[0]
            if not await add_char(user_id, username, first_name, char):
                await update.message.reply_text("·¥á Ä Ä·¥è Ä ·¥Ä·¥Ö·¥Ö…™…¥…¢ ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä ‚ö†Ô∏è", parse_mode='HTML')
                return

            await update.message.reply_photo(
                photo=char['img_url'],
                caption=format_caption(user_id, first_name, char, dice_val),
                parse_mode='HTML'
            )
        else:
            fail_msg = random.choice(FAIL_MSGS)
            await update.message.reply_text(
                f"·¥Ö…™·¥Ñ·¥á  Ä·¥ás·¥ú ü·¥õ: <b>{dice_val}</b>\n{fail_msg}\n·¥ò ü·¥Ä è·¥á Ä: <a href='tg://user?id={user_id}'>{first_name}</a>\n…¥·¥á·¥á·¥Ö·¥á·¥Ö: <b>1</b> ·¥è Ä <b>6</b>\n·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ …™…¥ 30 ·¥ç…™…¥·¥ú·¥õ·¥ás ‚è∞",
                parse_mode='HTML'
            )

    except Exception as e:
        print(f"Error in dice_marry: {e}")
        await update.message.reply_text("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ‚ö†Ô∏è", parse_mode='HTML')

async def propose(update: Update, context: CallbackContext):
    """Propose command"""
    try:
        user_id = update.effective_user.id
        first_name = update.effective_user.first_name
        username = update.effective_user.username

        can_use, remaining = check_cooldown(user_id, 'propose', PROPOSE_COOLDOWN)
        if not can_use:
            mins, secs = divmod(remaining, 60)
            await update.message.reply_text(
                f"·¥Ñ·¥è·¥è ü·¥Ö·¥è·¥°…¥: ·¥°·¥Ä…™·¥õ <b>{mins}·¥ç {secs}s</b> ‚è≥",
                parse_mode='HTML'
            )
            return

        # Check balance with single query
        user_data = await user_collection.find_one({'id': user_id}, {'balance': 1})
        if not user_data:
            await update.message.reply_text("·¥ò ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ “ì…™ Äs·¥õ\n·¥Ñ ü…™·¥Ñ·¥ã /start", parse_mode='HTML')
            return

        balance = user_data.get('balance', 0)
        if balance < PROPOSAL_COST:
            await update.message.reply_text(
                f"üí∞  è·¥è·¥ú …¥·¥á·¥á·¥Ö <b>{PROPOSAL_COST}</b> …¢·¥è ü·¥Ö ·¥Ñ·¥è…™…¥s ·¥õ·¥è ·¥ò Ä·¥è·¥ò·¥ès·¥á\n è·¥è·¥ú Ä  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á: <b>{balance}</b>",
                parse_mode='HTML'
            )
            return

        # Deduct cost immediately
        await user_collection.update_one({'id': user_id}, {'$inc': {'balance': -PROPOSAL_COST}})

        await update.message.reply_photo(
            photo='https://te.legra.ph/file/4d0f83726fe8cd637d3ff.jpg',
            caption='“ì…™…¥·¥Ä ü ü è ·¥õ ú·¥á ·¥õ…™·¥ç·¥á ·¥õ·¥è ·¥ò Ä·¥è·¥ò·¥ès·¥á üíç'
        )
        await asyncio.sleep(2)
        await update.message.reply_text("·¥ò Ä·¥è·¥ò·¥ès…™…¥…¢... üíï")
        await asyncio.sleep(2)

        # 40% success rate
        if random.random() > 0.4:
            await update.message.reply_photo(
                photo='https://files.catbox.moe/kvd5h7.jpg',
                caption='s ú·¥á  Ä·¥á·¥ä·¥á·¥Ñ·¥õ·¥á·¥Ö  è·¥è·¥ú Ä ·¥ò Ä·¥è·¥ò·¥ès·¥Ä ü ·¥Ä…¥·¥Ö  Ä·¥Ä…¥ ·¥Ä·¥°·¥Ä è üíî'
            )
        else:
            chars = await get_unique_chars(user_id, ['üíÆ Special Edition', 'üí´ Neon', '‚ú® Manga', 'üéê Celestial'])
            if not chars:
                # Refund on no characters
                await user_collection.update_one({'id': user_id}, {'$inc': {'balance': PROPOSAL_COST}})
                await update.message.reply_text("…¥·¥è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs\n·¥Ñ·¥è…™…¥s  Ä·¥á“ì·¥ú…¥·¥Ö·¥á·¥Ö üíî", parse_mode='HTML')
                return

            char = chars[0]
            if not await add_char(user_id, username, first_name, char):
                # Refund on error
                await user_collection.update_one({'id': user_id}, {'$inc': {'balance': PROPOSAL_COST}})
                await update.message.reply_text("·¥á Ä Ä·¥è Ä ·¥Ä·¥Ö·¥Ö…™…¥…¢ ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä\n·¥Ñ·¥è…™…¥s  Ä·¥á“ì·¥ú…¥·¥Ö·¥á·¥Ö ‚ö†Ô∏è", parse_mode='HTML')
                return

            await update.message.reply_photo(
                photo=char['img_url'],
                caption=format_caption(user_id, first_name, char),
                parse_mode='HTML'
            )

    except Exception as e:
        print(f"Error in propose: {e}")
        # Refund on error
        try:
            await user_collection.update_one({'id': user_id}, {'$inc': {'balance': PROPOSAL_COST}})
        except:
            pass
        await update.message.reply_text("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö\n·¥Ñ·¥è…™…¥s  Ä·¥á“ì·¥ú…¥·¥Ö·¥á·¥Ö ‚ö†Ô∏è", parse_mode='HTML')

application.add_handler(CommandHandler(['dice', 'marry'], dice_marry, block=False))
application.add_handler(CommandHandler(['propose'], propose, block=False))