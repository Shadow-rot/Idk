import os
import sys
import asyncio
from telegram import Update
from telegram.ext import CommandHandler, ContextTypes
from shivu import application, LOGGER, OWNER_ID
from telegram.error import BadRequest

async def restart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Restart the bot - Owner only command"""
    user_id = update.effective_user.id
    
    # Check if user is owner
    if user_id != OWNER_ID:
        await update.message.reply_text("‚ùå This command is only for the bot owner.")
        return
    
    response = await update.message.reply_text("üîÑ ** Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢  ô·¥è·¥õ...**", parse_mode='Markdown')
    
    try:
        # Clear all spawn data and locks
        LOGGER.info("Clearing spawn data before restart...")
        locks.clear()
        message_counts.clear()
        sent_characters.clear()
        last_characters.clear()
        first_correct_guesses.clear()
        last_user.clear()
        warned_users.clear()
        spawn_messages.clear()
        spawn_message_links.clear()
        
        await response.edit_text(
            "‚úÖ ** Ä·¥ás·¥õ·¥Ä Ä·¥õ ·¥ò Ä·¥è·¥Ñ·¥áss s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö!**\n\n"
            "‚è≥ ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ “ì·¥è Ä “ì·¥á·¥° s·¥á·¥Ñ·¥è…¥·¥Ös...\n"
            "üîÑ  ô·¥è·¥õ ·¥°…™ ü ü  ô·¥á  ô·¥Ä·¥Ñ·¥ã ·¥è…¥ ü…™…¥·¥á s ú·¥è Ä·¥õ ü è!",
            parse_mode='Markdown'
        )
        
        LOGGER.info("Bot restart initiated by owner")
        
        # Stop the application gracefully
        await application.stop()
        await application.shutdown()
        
        # Restart the process
        os.execl(sys.executable, sys.executable, *sys.argv)
        
    except Exception as e:
        LOGGER.error(f"Error during restart: {e}")
        try:
            await response.edit_text(f"‚ùå **·¥á Ä Ä·¥è Ä ·¥Ö·¥ú Ä…™…¥…¢  Ä·¥ás·¥õ·¥Ä Ä·¥õ:**\n`{str(e)}`", parse_mode='Markdown')
        except:
            pass


async def shutdown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Shutdown the bot - Owner only command"""
    user_id = update.effective_user.id
    
    # Check if user is owner
    if user_id != OWNER_ID:
        await update.message.reply_text("‚ùå This command is only for the bot owner.")
        return
    
    response = await update.message.reply_text("‚ö†Ô∏è **s ú·¥ú·¥õ·¥õ…™…¥…¢ ·¥Ö·¥è·¥°…¥  ô·¥è·¥õ...**", parse_mode='Markdown')
    
    try:
        await response.edit_text(
            "üõë ** ô·¥è·¥õ s ú·¥ú·¥õ·¥Ö·¥è·¥°…¥ …™…¥…™·¥õ…™·¥Ä·¥õ·¥á·¥Ö!**\n\n"
            "üëã …¢·¥è·¥è·¥Ö ô è·¥á!",
            parse_mode='Markdown'
        )
        
        LOGGER.info("Bot shutdown initiated by owner")
        
        # Clear all data
        locks.clear()
        message_counts.clear()
        sent_characters.clear()
        last_characters.clear()
        first_correct_guesses.clear()
        last_user.clear()
        warned_users.clear()
        spawn_messages.clear()
        spawn_message_links.clear()
        
        # Stop the application
        await application.stop()
        await application.shutdown()
        
        sys.exit(0)
        
    except Exception as e:
        LOGGER.error(f"Error during shutdown: {e}")
        try:
            await response.edit_text(f"‚ùå **·¥á Ä Ä·¥è Ä ·¥Ö·¥ú Ä…™…¥…¢ s ú·¥ú·¥õ·¥Ö·¥è·¥°…¥:**\n`{str(e)}`", parse_mode='Markdown')
        except:
            pass